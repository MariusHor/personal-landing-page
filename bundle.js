(()=>{var e={203:()=>{function e(){for(var e=document.querySelectorAll(".reveal"),t=0;t<e.length;t++){var r=window.innerHeight;e[t].getBoundingClientRect().top<r-150?e[t].classList.add("active"):e[t].classList.remove("active")}}setTimeout((function(){window.addEventListener("scroll",e)}),500)},724:()=>{function e(e,r){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,r){if(!e)return;if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return t(e,r)}(e))||r&&e&&"number"==typeof e.length){n&&(e=n);var o=0,l=function(){};return{s:l,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,a=!0,i=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){i=!0,c=e},f:function(){try{a||null==n.return||n.return()}finally{if(i)throw c}}}}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}document.addEventListener("mousemove",(function(e){r.forEach((function(t){var r=t.getAttribute("data-value"),n=e.clientX*r/250,o=e.clientY*r/250;t.style.transform="translateX("+n+"px) translateY("+o+"px)"}))}));var r=document.querySelectorAll(".object");var n=document.querySelectorAll(".scrolldown-btn"),o=document.querySelectorAll(".socials--bar"),l=document.querySelectorAll(".navigator"),c=document.querySelector(".hero__left").children,a=c.length,i=0;window.onload=function t(){var r,u=e(n);try{for(u.s();!(r=u.n()).done;){r.value.classList.add("active")}}catch(e){u.e(e)}finally{u.f()}var s,f=e(o);try{for(f.s();!(s=f.n()).done;){s.value.classList.add("active")}}catch(e){f.e(e)}finally{f.f()}var d,y=e(l);try{for(y.s();!(d=y.n()).done;){d.value.classList.add("active")}}catch(e){y.e(e)}finally{y.f()}c[i].classList.add("active"),i==a-1?i=0:i++,setTimeout(t,900)}},136:()=>{function e(e,r){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,r){if(!e)return;if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return t(e,r)}(e))||r&&e&&"number"==typeof e.length){n&&(e=n);var o=0,l=function(){};return{s:l,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,a=!0,i=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){i=!0,c=e},f:function(){try{a||null==n.return||n.return()}finally{if(i)throw c}}}}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var r=document.querySelector(".fullscreen-menu"),n=document.querySelector(".hamburger"),o=document.querySelector("body"),l=document.querySelectorAll(".show"),c=document.querySelector(".services"),a=document.querySelector(".portfolio"),i=document.querySelector(".contact"),u=document.querySelectorAll(".services-link"),s=document.querySelectorAll(".portfolio-link"),f=document.querySelectorAll(".contact-link"),d=document.getElementsByClassName("home-link"),y=document.querySelector("header");console.log(l),n.addEventListener("click",(function(){n.classList.toggle("active"),r.classList.toggle("active"),o.classList.toggle("overflow-hidden"),setTimeout((function(){var t,r=e(l);try{for(r.s();!(t=r.n()).done;){t.value.classList.toggle("active")}}catch(e){r.e(e)}finally{r.f()}}),500)}));var v,m=e(l);try{for(m.s();!(v=m.n()).done;){v.value.addEventListener("click",(function(){n.classList.remove("active"),r.classList.remove("active"),o.classList.remove("overflow-hidden");var t,c=e(l);try{for(c.s();!(t=c.n()).done;){t.value.classList.remove("active")}}catch(e){c.e(e)}finally{c.f()}}))}}catch(e){m.e(e)}finally{m.f()}var h,g=e(d);try{for(g.s();!(h=g.n()).done;){h.value.addEventListener("click",(function(){y.scrollIntoView()}))}}catch(e){g.e(e)}finally{g.f()}var b,p=e(u);try{for(p.s();!(b=p.n()).done;){b.value.addEventListener("click",(function(){c.scrollIntoView()}))}}catch(e){p.e(e)}finally{p.f()}var S,w=e(s);try{for(w.s();!(S=w.n()).done;){S.value.addEventListener("click",(function(){a.scrollIntoView()}))}}catch(e){w.e(e)}finally{w.f()}var L,A=e(f);try{for(A.s();!(L=A.n()).done;){L.value.addEventListener("click",(function(){i.scrollIntoView()}))}}catch(e){A.e(e)}finally{A.f()}},350:()=>{function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var t,r=document.querySelectorAll(".scrolldown-btn"),n=document.querySelector(".services"),o=document.querySelector(".portfolio"),l=document.querySelector(".contact"),c=function(t,r){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,r){if(!t)return;if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return e(t,r)}(t))||r&&t&&"number"==typeof t.length){n&&(t=n);var o=0,l=function(){};return{s:l,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(e){throw e},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,a=!0,i=!1;return{s:function(){n=n.call(t)},n:function(){var e=n.next();return a=e.done,e},e:function(e){i=!0,c=e},f:function(){try{a||null==n.return||n.return()}finally{if(i)throw c}}}}(r);try{var a=function(){var e=t.value;e.addEventListener("click",(function(){e.closest(".header")?n.scrollIntoView():e.closest(".about")?o.scrollIntoView():e.closest(".portfolio")&&l.scrollIntoView()}))};for(c.s();!(t=c.n()).done;)a()}catch(e){c.e(e)}finally{c.f()}},585:()=>{function e(e,r){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,r){if(!e)return;if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return t(e,r)}(e))||r&&e&&"number"==typeof e.length){n&&(e=n);var o=0,l=function(){};return{s:l,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:l}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,a=!0,i=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){i=!0,c=e},f:function(){try{a||null==n.return||n.return()}finally{if(i)throw c}}}}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var r=document.querySelector(".theme-switch"),n=document.getElementById("moon-icon"),o=document.getElementById("sun-icon"),l=document.querySelector("body"),c=document.querySelector(".fullscreen-menu"),a=document.querySelectorAll(".hamburger__bar");r.addEventListener("click",(function(){if(document.body.classList.toggle("light-theme"),l.classList.contains("light-theme")){document.body.classList.remove("dark-theme"),n.classList.remove("hide"),o.classList.toggle("hide"),c.classList.remove("fullscreen-menu"),c.classList.toggle("fullscreen-menu--light");var t,r=e(a);try{for(r.s();!(t=r.n()).done;){t.value.classList.remove("hamburger__bar")}}catch(e){r.e(e)}finally{r.f()}var i,u=e(a);try{for(u.s();!(i=u.n()).done;){i.value.classList.add("hamburger__bar--light")}}catch(e){u.e(e)}finally{u.f()}}else{document.body.classList.toggle("dark-theme"),o.classList.remove("hide"),n.classList.toggle("hide"),c.classList.remove("fullscreen-menu--light"),c.classList.toggle("fullscreen-menu");var s,f=e(a);try{for(f.s();!(s=f.n()).done;){s.value.classList.remove("hamburger__bar--light")}}catch(e){f.e(e)}finally{f.f()}var d,y=e(a);try{for(y.s();!(d=y.n()).done;){d.value.classList.add("hamburger__bar")}}catch(e){y.e(e)}finally{y.f()}}}))}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var l=t[n]={exports:{}};return e[n](l,l.exports,r),l.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{"use strict";r(136),r(724),r(585),r(350),r(203);r.p,r.p,r.p,r.p,r.p,r.p})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,